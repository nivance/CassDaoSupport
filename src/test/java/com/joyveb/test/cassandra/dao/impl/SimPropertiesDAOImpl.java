package com.joyveb.test.cassandra.dao.impl;

import me.prettyprint.cassandra.serializers.StringSerializer;
import me.prettyprint.cassandra.utils.Assert;
import me.prettyprint.hector.api.Keyspace;

import com.joyveb.support.cassandra.CassandraDaoSupport;
import com.joyveb.test.cassandra.dao.SimPropertiesDAO;
import com.joyveb.test.cassandra.domain.SimProperties;

public class SimPropertiesDAOImpl extends CassandraDaoSupport<String, SimProperties> implements SimPropertiesDAO {

    public SimPropertiesDAOImpl(Keyspace keyspace, String columnFamilyName) {
        super(keyspace, columnFamilyName, StringSerializer.get());
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table T_SIM_PROPERTIES
     *
     * @mbggenerated Tue Aug 21 10:23:40 CST 2012
     */
    public void insert(SimProperties record) {
//    	Mutator<String> mutator = HFactory.createMutator(this.keyspace, stringSerializer);
//		String key = record.getKey();
//		mutator.addInsertion(key, columnFamilyName, HFactory.createStringColumn("VALUE", record.getValue()))
//        	.addInsertion(key, columnFamilyName, HFactory.createStringColumn("DES", record.getDes()));
//        getCFTemplate().executeBatch(mutator);
    	record.setKey(record.getKey());
    	super.insert(record);
    }

	@Override
	protected SimProperties createPOJO() {
		return new SimProperties();
	}

	protected boolean validateKey(SimProperties t) {
		Assert.notNull(t, "bean is null.");
		Assert.notNull(t.getKey(), "key is null.");
		return true;
	}


}